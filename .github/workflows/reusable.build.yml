name: Reusable LLVM build

on:
  workflow_call:
    inputs:
      worker:
        description: Workers type to execute on
        required: true
        type: string
      release_build:
        description: Is it Release build (true) or Release+Asserts (false)
        required: true
        type: boolean
      llvm_version:
        description: LLVM version to build
        required: true
        type: string
      os:
        description: OS to build for. May be "win", "linux", or "macos"
        required: true
        type: string

env:
  linux_release_str: ${{ inputs.release_build && '--build-arg EXTRA_BUILD_ARG="--llvm-disable-assertions"' || ''}}
  stage1_artifact: ${{ format( 'llvm{0}_linux_x86_stage1_cache', inputs.llvm_version ) }}
  stage2_artifact: ${{ format( 'llvm{0}_{1}_x86', inputs.llvm_version, inputs.os ) }}
  file_name: ${{ format( 'llvm-{0}-ubuntu18.04-{1}-x86.arm.wasm.tar.xz', inputs.llvm_version, inputs.release_build && 'Release' || 'Release+Asserts' ) }}
  win_generator: ${{ inputs.image == 'windows-2019' && 'Visual Studio 16 2019' || inputs.image == 'windows-2022' && 'Visual Studio 17 2022' || 'error' }}
  win_gen_name: ${{ inputs.image == 'windows-2019' && 'vs2019' || inputs.image == 'windows-2022' && 'vs2022' || 'error' }} 
  win_tar_name: ${{ format( 'llvm-{0}-win.{1}-{2}-x86.arm.wasm', inputs.llvm_version, env.win_gen_name, inputs.release_build && 'Release' || 'Release+Asserts' ) }}

jobs:
  linux-build-1:
    if: inputs.os == 'linux'
    runs-on: ${{ inputs.worker }}

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Check environment
      run: |
        cat /proc/cpuinfo

    - name: Build LLVM
      run: |
        cd docker/ubuntu/18.04/cpu_ispc_build
        docker buildx create --use
        docker buildx build --tag ispc/ubuntu18.04:stage1 --target=llvm_build_step1 --cache-to=type=local,dest=cache.local --build-arg REPO=$GITHUB_REPOSITORY --build-arg SHA=$GITHUB_SHA --build-arg LLVM_VERSION=${{ inputs.llvm_version }} ${{ env.linux_release_str }} .

    - name: Upload package
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.stage1_artifact }}
        path: docker/ubuntu/18.04/cpu_ispc_build/cache.local

  linux-build-2:
    if: inputs.os == 'linux'
    needs: [linux-build-1]
    runs-on: ${{ inputs.worker }}

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Check environment
      run: |
        cat /proc/cpuinfo

    - name: Download package
      uses: actions/download-artifact@v2
      with:
        name: ${{ env.stage1_artifact }}
        path: docker/ubuntu/18.04/cpu_ispc_build/cache.local

    - name: Build LLVM
      run: |
        cd docker/ubuntu/18.04/cpu_ispc_build
        ls -al
        docker buildx create --use
        docker buildx build --tag ispc/ubuntu18.04:stage2 --target=llvm_build_step2 --cache-from=type=local,src=cache.local --build-arg REPO=$GITHUB_REPOSITORY --build-arg SHA=$GITHUB_SHA --build-arg LLVM_VERSION=${{ inputs.llvm_version }} ${{ env.linux_release_str }} --output=type=tar,dest=result.tar .

    - name: Pack LLVM
      run: |
        cd docker/ubuntu/18.04/cpu_ispc_build
        tar xvf result.tar usr/local/src/llvm
        mv usr/local/src/llvm/bin-${{ inputs.llvm_version }} .
        tar cJvf ${{ env.file_name }} bin-${{ inputs.llvm_version }}

    - name: Upload package
      uses: actions/upload-artifact@v2
      with:
        name: $${{ env.stage2_artifact }}
        path: docker/ubuntu/18.04/cpu_ispc_build/${{ env.file_name }}

  win-build:
    if: inputs.os == 'win'
    runs-on: ${{ inputs.worker }}

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1

    - name: Check environment
      shell: cmd
      run: |
        wmic cpu get caption, deviceid, name, numberofcores, maxclockspeed, status

    - name: Install dependencies
      shell: cmd
      run: |
        mkdir llvm
        echo LLVM_HOME=%GITHUB_WORKSPACE%\llvm>> %GITHUB_ENV%
        echo ISPC_HOME=%GITHUB_WORKSPACE%>> %GITHUB_ENV%

    - name: Build LLVM
      shell: cmd
      run: |
        python ./alloy.py -b --version=${{ inputs.llvm_version }} --verbose --generator="${{ env.win_generator }}"
        cd alloy_results* && type alloy_build.log

    - name: Pack LLVM
      shell: cmd
      run: |
        cd llvm
        7z.exe a -ttar -snl ${{ env.win_tar_name }}.tar bin-13.0
        7z.exe a -t7z ${{ env.win_tar_name }}.tar.7z ${{ env.win_tar_name }}.tar

    - name: Upload package
      uses: actions/upload-artifact@v2
      with:
        name: $${{ env.stage2_artifact }}
        path: llvm/${{win_tar_name}}.tar.7z
